# Azure Backend Deployment Workflow for Phronesis
#
# This workflow handles backend deployment to Azure App Service (Docker) ONLY.
# It is triggered on push to main branch or manual dispatch.
#
# All CI (lint, test, build) steps are handled in ci.yml and must pass before deployment.
# This workflow assumes code is production-ready and only manages deployment.
#
# Required secrets:
#   - AZURE_WEBAPP_PUBLISH_PROFILE (for publish profile deployment)
#   - AZURE_CREDENTIALS (optional, for service principal login)
#
# Frontend deployment is managed separately.
name: Azure Backend Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    defaults:
      run:
        working-directory: backend
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "sqlite:///:memory:"
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install "poetry>=1.6.0,<2.0.0"

      - name: Install dependencies
        run: poetry install --no-root
        working-directory: backend

      - name: Run tests
        run: PYTHONPATH=. poetry run pytest --maxfail=1 --disable-warnings --tb=short -s

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      AZURE_WEBAPP_NAME: phronesis-backend-app
      AZURE_RESOURCE_GROUP: phronesis-rg
      PYTHON_VERSION: '3.11'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install "poetry>=1.6.0,<2.0.0"

      - name: Check lockfile sync
        run: |
          poetry lock --check || (echo 'poetry.lock is out of sync with pyproject.toml. Run "poetry lock" and commit the updated lock file.' && exit 1)
        working-directory: backend

      - name: Set image name (lowercase)
        id: vars
        run: |
          IMAGE_NAME="ghcr.io/${GITHUB_REPOSITORY,,}/phronesis-backend:${GITHUB_SHA}"
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -f backend/Dockerfile -t ${{ steps.vars.outputs.image_name }} backend

      - name: Push Docker image
        run: docker push ${{ steps.vars.outputs.image_name }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set App Service to new Docker image from GHCR
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ steps.vars.outputs.image_name }} \
            --docker-registry-server-url https://ghcr.io \
            --docker-registry-server-user ${{ github.actor }} \
            --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}

      - name: Post-deployment - Run Alembic migrations
        run: |
          # SSH into the app or use Azure CLI to run migrations if needed
          echo "Manual step: Run poetry run alembic upgrade head if DB schema changed."

# Instructions:
# 1. Set your Azure Web App name above.
# 2. In Azure Portal, go to your Web App > Get publish profile. Download and copy its contents.
# 3. In GitHub repo settings > Secrets and variables > Actions, add a new secret:
#    Name: AZURE_WEBAPP_PUBLISH_PROFILE
#    Value: (paste the publish profile XML)
# 4. (Optional) For service principal login, use AZURE_CREDENTIALS instead.
